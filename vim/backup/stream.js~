var CREDENTIALS = require('base64').encode('goldjunge:Calculon42');

//
//
//
//
//

var
  fs      = require('fs'),
  sys     = require('sys'),
  url     = require('url'),
  http    = require('http'),
  qs      = require('querystring'),
  growl   = require('growl'),
  twitter = http.createClient(80, 'stream.twitter.com'),
  headers = {},
  cachePath = '/tmp/nodejunkie/cache/',
  startStream;


startStream = function () {
  var
    filter = qs.stringify({
      // track: '#nodejs,#express'
      track: '#sc,#soundcloud,soundcloud'
    }),
    req;
  
  sys.puts(filter);
  req = twitter.request('GET', '/1/statuses/filter.json?' + filter, {
    'host': 'stream.twitter.com',
    'authorization': CREDENTIALS
  });

  req.addListener('response', function (res) {
    var rawMessage = '';

    /*
      FIXME smarter status handling 
    */
    if (res.statusCode !== 200) {
      sys.puts('reconnecting');
      startStream();
      
      return false;
    }

    res.setBodyEncoding('utf8');
    res.addListener('data', function (chunk) {
      var
        newLine = chunk.lastIndexOf('\n');
      
      // handling empty chunks (maybe to keep the connection open)
      if (/^\r\n/.test(chunk)) {
        sys.puts('only newline');
        
        return false;
      }
      
      rawMessage += chunk;
      
      if (newLine !== -1) {
        try {
          var tweet = JSON.parse(rawMessage);
        } catch (e) {
         sys.print(chunk);
          
          throw e;
        }
        
        sys.puts('displaying tweet');
        
        var
          urlObj = url.parse(tweet.user.profile_image_url, true),
          path = urlObj.pathname,
          filename = path.substr(path.lastIndexOf('/') + 1, path.length),
          filePath = cachePath + filename;
        
        fs.open(filePath, 'w+', undefined, function (err, fd) {
          if (err) throw err;
          
          var
            imageClient = http.createClient(80, urlObj.hostname),
            request = imageClient.request('GET', urlObj.pathname, {
              'host': urlObj.hostname
            });

          request.addListener('response', function (res) {
            res.setBodyEncoding('binary');
            res.addListener('data', function (chunk) {
              fs.writeSync(fd, chunk, null, 'binary');
            });
            res.addListener('end', function () {
              fs.close(fd, function (err) {
                if (err) err;

                growl.notify(tweet.text, {
                  title: tweet.user.name,
                  image: filePath
                });
              });
            });
          });
          request.close();
        });
        
        rawMessage = '';
      }
    });
    res.addListener('end', function () {
      sys.puts('oh noez');
    });
  });
  req.close();
};

sys.exec('mkdir -p ' + cachePath, function (err, stdout, stderr) {
  startStream();
});

