var
  sys     = require('sys'),
  ws      = require('ws'),
  log     = function (x) {sys.puts(x);},
  ins     = function (x) {sys.puts(sys.inspect(x));},
  clients = 0,
  cons    = {};


ws.createServer(function (con) {
  var
    id;

  con.addListener('connect', function (resource) {
    id = (function () {
      var s = '';

      for (var i = 0; i < 32; i++) {
        s += (~~(Math.random() * 0x10)).toString(0x10);
      }

      return s;
    })();

    cons[id] = con;

    clients++;
    log('connect: ' + id);
  });

  con.addListener('data', function (data) {
    log('data: ' + id);
    log(data);
  });

  con.addListener('close', function () {
    log('close');
    log(id);

    delete cons[id];

    clients--;
  });
}).listen(8080, '127.0.0.1');

log('Server started at: 127.0.0.1:8080');

setInterval(function () {
  log('clients: ' + clients);
}, 15000, undefined);

// twitter stream
var
  url     = require('url'),
  http    = require('http'),
  qs      = require('querystring'),
  base64  = require('base64'), 
  twitter = http.createClient(80, 'stream.twitter.com'),
  CRED    = base64.encode('goldjunge:Calculon42'),
  startStream;

startStream = function () {
  var
    req,
    filter = qs.stringify({
      track: '#sc,#soundcloud,soundcloud'
    });

  req = twitter.request('GET', '/1/statuses/filter.json?' + filter, {
    'host': 'stream.twitter.com',
    'authorization': CRED
  }); 
  req.addListener('response', function (res) {
    var
      rawMessage = '';

    res.setBodyEncoding('utf8');
    res.addListener('data', function (data) {
      var
        newLine = data.lastIndexOf('\n');

      // handling empty chunks
      if (/^\r\n/.test(data)) {
        log('newline');

        return false;
      }
      
      rawMessage += data;

      if (newLine !== -1) {
        for (var key in cons) {
          cons[key].write(rawMessage);
        }

        rawMessage = '';
      }
    });
    res.addListener('end', function () {
      startStream();
    });
  });
  req.close();
};

startStream();

