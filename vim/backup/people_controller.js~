$(function() {  
  $('#people')
    .filter('.finder')
      .each(function() {
        
        var deactivatePlatform = function(name) {
          var item = $('#badge-'+name);

          item
           .removeClass('displayed')
           .removeClass('show')
           .addClass('inactive');

          item.find('li.import').removeClass('hidden');
          item.find('li.more').addClass('hidden');  
        };
        
        var activatePlatform = function(name) {
          var item = $('#badge-'+name);
          item
           .removeClass('not-displayed')
           .removeClass('inactive')
           .addClass('show')
           .addClass('displayed')
           .find('input:checkbox')
           .selected(true)
           .end()
           .find('li.toggle a')
           .text("Hide");
                           
          item.find('li.toggle').removeClass('hidden').show();                             
          item.find('li.more').removeClass('hidden').show();
        };
        
        var throbLists = function(throb) {          
          if (throb) {            
            // show the throbber
            $('#suggested-users').find('.status, .form-buttons').empty().end().show();
            // throb the list containers
            $('#all-users ul')
              .each(function(index) {
                var $list = $(this);
                $list
                  // keep the list height while it's throbbing
                  .css('height', $list.height())
                  .empty()
                  .throb(true);
              });
          } else {
            $('#all-users ul').throb(false);
          }
          return $('#all-users');
        };
        
        // filtering userlists
        var $status = $('p.status:first');
        var filterLists = function(extraCallback) {            
          throbLists(true);
          
          // get the filter settings
          var filter = {};
          $('input:checkbox[name^=networks]').each(function(i, n){ 
            filter[n.name] = n.checked;
          });
          // load the partial
          $.scAjax({
            url: '/people/finder',
            data: filter,
            type: 'show',
            callback: function(response) {
              throbLists(false).html(response);
              $.pulldownHide();
              
              if (extraCallback) {
                extraCallback(response);
              }
            }
          });
        };
        // toggle network in the list
        // currently not used
        $('li.toggle a').live('click', function(event) {          
          // update the link
          var $item = $(this).closest('li');
          // toggle the hidden checkbox
          var $checkbox = $item.find('input:checkbox').each(function() { this.checked = !this.checked; });
          // update the badge
          
          $item.parents('li').toggleClass('displayed');
          $item.parents('li').toggleClass('not-displayed');
          
          // change the text in the button
          $(this).text($checkbox.is(':checked') ? 'Hide' : 'Show');
          // filter the list now
          filterLists();
          return false;
        });
        
        // hide other networks in the list
        $('a.hide-others').live('click', function(event) {
          var platform = $(this).throb(true).parents('.pulldown')[0].id.replace('pulldown-','');
          // update the link
          var $item = $('#badge-' + platform);
          // toggle the hidden checkbox
          $item
            .removeClass('not-displayed')
            .addClass('displayed')
            .find('input:checkbox')
              .selected(true)
            .end()
            .siblings('.show')
              .removeClass('displayed')
              .addClass('not-displayed')
              .find('input:checkbox')
                .selected(false);
          // filter the list now
          filterLists();
          return false;
        });        
                
        var pollImportStatus = function(importId, previousState, tries, maxTries, finished, errorHandler) {
          //$.debug.log("pollImportStatus("+importId+","+previousState+","+tries+","+maxTries+")");
          
          $.scAjax({
            url: '/people/finder/import_status',
            type: 'show',
            data: {'id': importId},
            callback: function(response) {              
              //$.debug.log(response);
              
              var importStatus = $.parseJSON(response);              
              switch (importStatus.state) {  
                case 0: break; // not started yet                                                
                case 1: // so we're currently importing, add some extra time
                        if (previousState === null || previousState === 0) {
                          maxTries += 30;
                        }
                        break;
                case 2: finished(importStatus); break;
                case 3: 
                case 4: errorHandler(importStatus); break;
                default: 
              }              
              
              // still importing?              
              if (importStatus.state < 2) {                
                if (tries <= maxTries) {
                   setTimeout(function() {
                     pollImportStatus(importId, importStatus.state, tries+1, maxTries, finished, errorHandler);
                   }, tries * 2000);
                 } else {
                   errorHandler(importStatus, "Sorry, the importing of contacts timed out.");
                 }
               }                   
            },
            
            error: function(xhr, status, error) {
              //$.debug.log("ERROR: " + status + " " + error);
              //errorHandler(xhr, status, error);
            }          
          });  
        };
        
        $(document).bind('backgroundImport', function(ev, importerId) {              
          throbLists(true);
          // kick of period checking
          pollImportStatus(importerId, 
            null,
            1,
            15,
            function(status) {                          
            //$.debug.log("importing finished");                                        
            filterLists(function(resp) {
              $.helpers.notice(status.message || "Import finished");
            });
          }, function(status, message) {
            //$.debug.log("error");            
            $.helpers.notice(message || status.message || "Error during import");            
          });            
        });
        
        var updateForm = function(node) {
          // throbLists(true);
          $(node).closest('form').scAjaxSubmit({
            callback: function(response) {
              filterLists(function() {
                $.helpers.notice(response);
              });
            }
          });
        };
                
        $('select.change-account').change(function() {
          updateForm(this);
        });
                
        $('#invite-users input:submit').live('click', function(ev) {
          updateForm(this);
          return false;
        });
        
        // reset the invite GUI when canceled
        $('#invite-users a.cancel').live('click', function(ev){
          // show suggested contacts
          return false;
        });
        
        $('#follow-all').live('click', function(ev) {          
          $.scAjax({
            url: '/people/finder/follow_all',
            type: 'create',
            callback: function(response) {
              $('#follow-all').throb(false);            
              $.helpers.notice("Followed all");
              $('#suggested-users').hide();
            },
            error: function(xhr, status, error) {
              if (xhr.status === 403) {
                $.helpers.notice(xhr.responseText);
              }
            } 
          });
        });
        
        // hide contacts
        $('#invite-users a.hide-contact').live('click', function(event) {
          var $badge = $(this).closest('li');
          var $contact = $(this).attr('id').match(/\d+/)[0];
          
          $.scAjax({
            url: '/people/finder/hide_users',
            data: {'contact[]': $contact},
            type: 'destroy',
            callback: function() {
              $badge.remove();
              if ($('ul.invite-user-list > li').length === 0) {
                $('#invite-users').hide();
              }
            }
          });
          return false;
        });        
      
        // hiding users
        $('#list-users a.hide-user').live('click', function(event) {
          var $badge = $(this).closest('li');
          
          $.scAjax({
            url: '/people/finder/hide_users',
            data: {'user[]': $badge.attr('id').match(/\d+/)[0]},
            type: 'destroy',
            callback: function() {
              $badge.remove();
              
              if ($('ul.user-list-small > li').length === 0) {
                $('#suggested-users').hide();
              }
            }
          });
          return false;
        });
        
        // select all contacts for invite
        $('#select-all').live('click', function(event) {
          $(this).parents('form').find('li:not(.already-invited) input:checkbox').selected(!!this.checked);
        });
        
        // show pulldown when clicking on 'more'
        $('li.more > a').pulldown({
          callback: function($container) {
            $('a', $container).throb(false);
          }
        });
        
        $('li.activate input.already-active:submit').live('click', function(event) {
          var badge = $(this).parents('li.platform')[0];
          var platform = badge.id.replace('badge-','');

          $(badge).find("input:checkbox").each(function() { this.checked = true; });            
          $(badge).toggleClass('displayed');
          $(badge).toggleClass('not-displayed');
          
          $('#no-platform').hide();

          filterLists(function (resp) {                        
            activatePlatform(platform);  
          });

          return false;  
        });
                
        $('input.deactivate').live('click', function(event) {
          var $checkbox = $(this).siblings("input:checkbox");
          var platform = $checkbox.attr('name').match(/\[(\w+)\]/)[1];
          var $badge = $('#badge-' + platform);
          
          // deactivate the badge
          $badge.removeClass('displayed').removeClass('not-displayed');
          
          // toggle the checkbox  
          $(this).siblings("input:checkbox").selected(false);
          
          // send the state of platforms
          var filter = {};
          $('input:checkbox[name^=networks]').each(function(i, n){ 
            filter[n.name] = n.checked;
          });
          
          throbLists(true);
          
          $.scAjax({
            url: '/people/finder',
            data: filter,
            type: 'show',
            callback: function(response) {
              throbLists(false).html(response);
              $.pulldownHide();
              deactivatePlatform(platform);                
            }
          });                                      
          return false;
        });
  
        $('#remove-csv-btn').live('click', function() {                          
          throbLists(true);
                        
          $.scAjax({
            url: '/people/finder/csv_remove',
            type: 'destroy',
            callback: function(response) {
              throbLists(false).html(response);
              $.pulldownHide();              
              deactivatePlatform('csv');            
              $(document).trigger('onUploaderUpdate');
            }
          });
          
          return false;
        });
        
        // CSV upload
        var $uploadButton = $('#upload-csv-btn');
        $uploadButton.uploader({
            multiple:    false,            
            maxFileSize: 1 * 1024 * 1024 // 1 Mebi
          })
          .bind('onAllSelect', function(ev, flash, upload) {
            throbLists(true);
            flash.upload({url: "/people/finder/csv_import?user_id="+ SC.CURRENT_USER.id +"&security_token=" + security_token});
          })
          .bind('onComplete', function(ev, flash, upload) {                    
            var filename = upload[0].name;        
            var message  = upload[1];                                   
            
            $uploadButton.closest("li").addClass("hidden");
            activatePlatform('csv');
            
            filterLists(function() {
              //TODO sometimes filename doesn't shopw up
              $('#upload-csv-btn').parents("li.first").text(filename);              
              $.helpers.notice(message);              
            });                                                         
          })                  
          .bind('onError', function(ev, flash, response) {                        
            var msg = "";
            var status = response[2];
            switch(status) {
              case 417: msg = "No CSV data found, could not import contacts";break;
              case 401: msg = "Unauthorized";break;
              case 422: msg = "No email addresses in CSV file found, could not import contacts";break;
              case 415:
              case 500: msg = "Could not parse CSV file";break;
              case 503: msg = "Timeout upoading file";break;
              default:  msg = "Unknown error: " + status; break;
            }            
            $.helpers.notice(msg);
          });          
    });
});
