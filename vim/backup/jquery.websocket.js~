(function ($, window, undefined) {

  $.extend({
    websocket: function (port, host, path, opts) {
      var opts = $.extend({
        port: port,
        host: host,
        path: path
      }, $.websocket.defaults, opts);
      
    }
  });
  $.websocket = function (port, host, path, opts) {
    
  };
  var WSWrapper = function (options) {
    var self = this,
        options = options || {},
        opts = $.extend({
          host: 'localhost',
          port: null,
          path: '/'
        }, options),
        url = 'ws://' + opts.host + (opts.port ? (':' + opts.port) : '') + ((opts.path.indexOf('/') === 0) ? opts.path : ('/' + opts.path)),
        connection;
  
    this.opts = opts;
    this.callbacks = {};
    this.connection = connection = new WebSocket(url);

    // dispatch the handlers
    connection.onopen = function () {
      self._dispatch('open', null);
    };
    connection.onclose = function () {
      self._dispatch('close', null);
    };
    connection.onmessage = function (event) {
      var stanza = $.parseJSON(event.data);

      self._dispatch(stanza[0], stanza[1], stanza[2]);
    };
  };

  $.extend(WSWrapper.prototype, {
    _dispatch: function (name, attr, payload) {
      var list = this.callbacks[name] || [];

      if (!list.length) {return;}

      $.each(list, function (idx, fn) {
        fn(attr, payload);
      });
    },
    close: function () {
      this.connection.close();

      return true;
    },
    bind: function (name, callback) {
      var cbs = this.callbacks;

      cbs[name] = cbs[name] || [];
      cbs[name].push(callback);

      return this;
    },
    trigger: function (name, attr, payload) {
      var stanza = JSON.stringify([name, attr, payload]);

      this.connection.send(stanza);

      return this;
    }
  });
  
  // expose WSWrapper to global object
  window.WSWrapper = WSWrapper;
  
})(jQuery, window, undefined);

