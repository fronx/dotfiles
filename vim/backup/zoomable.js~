/* Plugin for zoom images, works on a tags linked directly to image files 
* by Matas Petrikas - matas@soundcloud.com
*/
(function($) {
  
  // TODO: split the zoomable GUI and content loading/appending into two independant parts
  
  var customEventType = 'click.zoom';
  
  $.closeZoomScreen = function(callback){
    //$.debug.log('removing zoom screen', msg);
    // put the appended dom parts back
    $('#zoom-screen').find('.return-to-dom:first').hide().removeClass('return-to-dom').appendTo(document.body);
    $('#zoom-screen').remove();
    $(document.body).unbind(customEventType);
    $(document).trigger('onZoomClose');
    if($.isFunction(callback)){
      callback();
    }
  };
  
  $.zoomable = function(ev, callerSettings) {
    
    var $scope = $(ev.target || ev);
    var settings = $.extend({
      src: $.zoomable.content.id, // function that delivers content
      width: 400,
      height: 300,
      offsetDefault: 28, // it is a sum of padding and border width of zoom container / 2
      showCloseButton: true,
      closeButton: '<span id="zoom-screen-close">Close</span>',
      eventTrigger: customEventType,
      beforeDisplay: function(data){
        return data;
      },
      callback: function() {},
      beforeClose: null
    }, callerSettings||{});
    
    // get the eviroment dimensions
    var windowWidth = $(document).width();
    var windowHeight = window.innerHeight || $(window).height();
  
    // remove previous zoomed image
    $.closeZoomScreen();
    // create new zoom container
    var $zoomContainer = $('<div id="zoom-screen"><div id="zoom-screen-loader"></div></div>')
                          .appendTo('body')
                          .hide();
    // setup close button
    var $closeButton = $(settings.closeButton).prependTo($zoomContainer).hide();
  
  
    // create and hide wrapper for the content
    var $loader = $('<div id="zoom-content-wrapper"></div>').appendTo($zoomContainer).hide();
  
    var checkAndClose = function(){
      if($.isFunction(settings.beforeClose)){
         settings.beforeClose.apply($scope, [$loader]);
      }else{
        $.closeZoomScreen();
      }
    };

    // close zoom container on click outside
    $(document.body).bind('click.zoom', function(ev){
      if($.helpers.isNormalClick(ev)){
        // react only to real clicks
        var $target = $(ev.target);
        var clickedOutside = ($target.closest('#zoom-screen').size() === 0);
        var clickedOnClose = ($target.attr('id') === $closeButton.attr('id') && $closeButton.attr('id'));
        var clickedOnCancel = ($target.closest('#zoom-screen').size() && $target.hasClass('cancel'));
        if( (clickedOnClose || clickedOutside || clickedOnCancel) && $zoomContainer.is(':visible')){
          checkAndClose();
          return !(clickedOnClose || clickedOnCancel);
        }
      }
      
    });
  
    // close zoomable on escape button
    $zoomContainer.keydown(function(ev){
      if(ev.keyCode === 27){
        checkAndClose();
        return false;
      }
    });

    // display the zoomed content
    var displayFinal = function(content, width, height){

      var widthFinal = (width || settings.width);
      var heightFinal = (height || settings.height);
      
      $loader.append($(settings.beforeDisplay(content)).show());

      $zoomContainer.animate({
        width: widthFinal,
        height: heightFinal,
        top: Math.max(((windowHeight - heightFinal) / 2) + $(document).scrollTop(),0),
        left: (windowWidth - widthFinal - settings.offsetDefault) / 2
      }, SC.FX_MEDIUM, "easeInOutExpo", function() {
        // remove throbber
        $('#zoom-screen-loader').hide();
        // show the close button
        if(settings.showCloseButton){
          $closeButton.fadeIn("fast");
        }
        // show the content
        if($loader.find('object,embed').exists()){
          $loader.show(); // don't fade flash
          settings.callback.apply($scope, [$loader]);
        }else{
          $loader.fadeIn('slow', function(){
            settings.callback.apply($scope, [$loader]);
          });
        }
        // switch to negative margin positioning, so no need to listen to window resize 
        $(this).css({
          marginLeft: 0 - ((widthFinal + settings.offsetDefault)/2),
          left: '50%'
        });
      });
      $(document).trigger('onZoomDisplay');
    };

    
    // initial animation
    $zoomContainer
      .show()
      .css({
          left: ev.pageX || $scope.offset().left,
          top: ev.pageY || $scope.offset().top,
          width: 0,
          height: 0,
          opacity: 0
        })
      .animate({
          opacity: 1,
          width: settings.width,
          height: settings.height,
          top: Math.max(((windowHeight - settings.height) / 2) + $(document).scrollTop(),0),
          left: (windowWidth - settings.width - settings.offsetDefault) / 2
        }, SC.FX_SLOW, "easeInOutExpo", function() {
          $(this).css({filter:''}); // remove filter from node styles, because it causes overflow hidden in IE
          // set the zoomed content up 
          if($.isFunction(settings.src)){
            settings.src.apply($scope, [displayFinal]);
          }
        });
    
  };
  
  var getHref = function(node) {
    return $(node).closest('a')[0].href;
  };
  
  var getIdFromHash = function(node) {
    var hash = getHref(node).match(/#(.*)/);
    if(hash){
      return hash[1];
    }else{
      console.error('No url hash could be extracted from this node', node);
      return false;
    }
  };
  
  // zoomable accepts a few types of content, wich can be extended or replaced completely by custom methods.
  // the default type of content is $.zoomable.id, which means it'll look for a dom node with id coresponding to links anchor
  $.zoomable.content = {
    // pass the existing dom object
    // node is returned to the dom after the zoomable window closed
    dom: function(domNode, callback) {
      var $node = $(domNode).addClass('return-to-dom');
      var width = $node.width() || parseInt($node.css('width'), 10);
      var height = $node.height() || parseInt($node.css('height'), 10);
      // display the node from the dom
      callback($node, width, height);
    },
    // simple node passing
    // simple id linking to the existing dom obejcts
    id: function(callback) {
      var id = getIdFromHash(this);
      if(id){
        $.zoomable.content.dom(document.getElementById(getIdFromHash(this)), callback);
        // $.zoomable.content.dom.apply(document.getElementById(getIdFromHash(this)), [callback]);
      }
    },
    // load images, lightbox style
    image: function(callback) {
      var img = new Image();
      img.onload = function(){
        // remove the zoom screen on iamge click
        $(img).bind('click', function(ev){ 
          $.closeZoomScreen();
        });
        // display the image after it's loaded
        callback(img, img.width, img.height);
      };
      img.src = getHref(this);
    },
    // load json data, and pass it to the callback, 
    // for more extensive manipulation, use a custom version of this method or process the json with beforeDisplay method
    json: function(callback) {
      $.getJSON(getHref(this), function(data){
        callback(data);
      });
    },
    loadHtml: function(callback) {
      $.scAjax({
        url: getHref(this),
        accept: 'text/html',
        callback: function (res) {
          callback(res);
        }
      });
    }
  };
  

  
  $.fn.zoomable = function(callerSettings) {
    return this.each(function(){
      // open the dialog on event
      $(this).unbind(customEventType).bind(customEventType, function (ev) {
        $.zoomable(ev, callerSettings);
        return false;
      });
    
    });
  };
})(jQuery);

